/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package calc.calcUI;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.EventListener;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;

public class CalcUI extends javax.swing.JFrame {
   Converter converter = new Converter();
       /* Creates new form CalcUI*/
    public CalcUI() {
        setTitle("Unit Converter");
        initComponents();
        myInitComponents();
    }
    public void myInitComponents() {
//initializations of two Unit Comboboxes with top Units from UnitChooseCombobox list - Длина
LangMenuItem_Russ_.setState(true);
PointMenuItem.setState(true);
     FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "ангстрем","нанометр","микрометр","мм","cм","дц","м","чейн","км","дюйм","фут",
    "ярд","мил(mil)","морская миля","морская сажень"}));
        ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "ангстрем","нанометр","микрометр","мм","cм","дц","м","чейн","км","дюйм","фут",
    "ярд","мил(mil)","морская миля","морская сажень"}));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        FromCmBox = new javax.swing.JComboBox();
        UnitChooseCBx = new javax.swing.JComboBox();
        ToTxtField = new javax.swing.JTextField();
        ToCmBx = new javax.swing.JComboBox();
        FromTxtField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        LangMenuItem_Russ_ = new javax.swing.JCheckBoxMenuItem();
        LangMenuItem_Eng_ = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();
        PointMenuItem = new javax.swing.JCheckBoxMenuItem();
        CommaMenuItem = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UNIT Converter");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, UnitChooseCBx, org.jdesktop.beansbinding.ELProperty.create("${selectedItem}"), FromCmBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        FromCmBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FromCmBoxActionPerformed(evt);
            }
        });

        UnitChooseCBx.setMaximumRowCount(12);
        UnitChooseCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Длина", "Площадь", "Объем", "Плотность", "Температура", "Давление" }));
        UnitChooseCBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnitChooseCBxActionPerformed(evt);
            }
        });

        ToTxtField.setEditable(false);
        ToTxtField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ToTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToTxtFieldActionPerformed(evt);
            }
        });

        ToCmBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToCmBxActionPerformed(evt);
            }
        });

        FromTxtField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        FromTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FromTxtFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("from");

        jLabel3.setText("to");

        jMenu4.setText("Язык");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        LangMenuItem_Russ_.setText("Русский");
        LangMenuItem_Russ_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LangMenuItem_Russ_ActionPerformed(evt);
            }
        });
        jMenu4.add(LangMenuItem_Russ_);

        LangMenuItem_Eng_.setText("Английский");
        LangMenuItem_Eng_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LangMenuItem_Eng_ActionPerformed(evt);
            }
        });
        jMenu4.add(LangMenuItem_Eng_);

        jMenuBar1.add(jMenu4);

        jMenu2.setText("Разделители");

        PointMenuItem.setText("Точка");
        PointMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(PointMenuItem);

        CommaMenuItem.setText("Запятая");
        CommaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommaMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(CommaMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Вид");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("Полный список");
        jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jRadioButtonMenuItem1);

        jRadioButtonMenuItem2.setSelected(true);
        jRadioButtonMenuItem2.setText("Краткий");
        jRadioButtonMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jRadioButtonMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UnitChooseCBx, 0, 170, Short.MAX_VALUE)
                    .addComponent(FromTxtField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ToTxtField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FromCmBox, 0, 216, Short.MAX_VALUE)
                    .addComponent(ToCmBx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(UnitChooseCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FromTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(FromCmBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ToTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToCmBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void UnitChooseCBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnitChooseCBxActionPerformed
                 //  Switching Units in UnitChooseCombobox list
        switch (UnitChooseCBx.getSelectedIndex()) {  
            case 0://dlina
                if (LangMenuItem_Russ_.isSelected()) {
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "ангстрем","нанометр","микрометр","мм","cм","дц","м","чейн","км","дюйм","фут",
    "ярд","мил(mil)","морская миля","морская сажень"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "ангстрем","нанометр","микрометр","мм","cм","дц","м","чейн","км","дюйм","фут",
    "ярд","мил(mil)","морская миля","морская сажень"}));
                                   ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                } else {//in English
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "Angstrom (Å)","Nanometre (nm)","Micrometre (µm)","Millimetre (mm)","Centimetre (cm)",
    "Decimetre (dm)","Metre (m)","Chain","Kilometre (km)","Inch (in)","Foot (ft)",
    "Yard (yd)","Mil(mil)","Sea mile","Fathom"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "Angstrom (Å)","Nanometre (nm)","Micrometre (µm)","Millimetre (mm)","Centimetre (cm)",
    "Decimetre (dm)","Metre (m)","Chain","Kilometre (km)","Inch (in)","Foot (ft)",
    "Yard (yd)","Mil(mil)","Sea mile","Fathom"}));
                                   ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                }
                break;
            case 1://square
                if (LangMenuItem_Russ_.isSelected()) {
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "нанометр²","микрометр²","мм²","см²","дц²","м²","Ар","Гектар","км²","Тауншип",
    "миля²","Хомстед","Акр","Руд","Род²","Сквайр","Ярд²","Фут²","Дюйм²"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "нанометр²","микрометр²","мм²","см²","дц²","м²","Ар","Гектар","км²","Тауншип",
    "миля²","Хомстед","Акр","Руд","Род²","Сквайр","Ярд²","Фут²","Дюйм²"}));
                               ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                } else {//in English
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "nanometre²","micrometre²","millimetre²","centimetre² (cm²)","decimetre²",
    "metre²","Are (a)","Hectare (ha)","kilometre²","Township","mile²","Homestead",
    "Acre","Rood","rod²","Square","yard² (sy²)","foot² (ft²)","inch² (in²)"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "nanometre²","micrometre²","millimetre²","centimetre² (cm²)","decimetre²",
    "metre²","Are (a)","Hectare (ha)","kilometre²","Township","mile²","Homestead",
    "Acre","Rood","rod²","Square","yard² (sy²)","foot² (ft²)","inch² (in²)"}));
                                        ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                }
                break;
            case 2://volume
                if (LangMenuItem_Russ_.isSelected()) { //in Russian
                    //if (longList){
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{    
    "акр-фут","акр-дюйме","attoliter","баррель","баррель (нефти)","ванна (библейский)","досковой фут","бушель","бушель (UK)","кабина (библейский)",
    "cc","ccf","сантилитр","Кор (библейский)","шнур","сантиметр³","фут³","дюйм³","метр³","ярд³",
    "чашка","чашка (UK)","децилитр","decistere","декалитр","dekastere","десертная ложка","десертная ложка (UK)","драхма","драхма (UK)",
    "капля","сухая пинта","сухая кварта","exaliter","фемтолитр","галлон","галлон (UK)","гигалитр","гилл","гилл (UK)",
    "гектолитр","Хин (библейский)","бочка","Гомер (библейский)","сто³ футов","килолитр","литр","log (библейский)","мегалитр", "микролитр",
    "миллилитр","миним","миним (UK)","нанолитр","унция","унция (UK)","пек","пек (UK)","петалитр","пиколитр",
    "пинта","пинта (UK)","кварта","кварта (UK)","ster","ст.ложка","ст.ложка (UK)","Таза (испанский)","ч. ложка","ч. ложка (UK)",
    "teraliter","тун"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{    
    "акр-фут","акр-дюйме","attoliter","баррель","баррель (нефти)","ванна (библейский)","досковой фут","бушель","бушель (UK)","кабина (библейский)",
    "cc","ccf","сантилитр","Кор (библейский)","шнур","сантиметр³","фут³","дюйм³","метр³","ярд³",
    "чашка","чашка (UK)","децилитр","decistere","декалитр","dekastere","десертная ложка","десертная ложка (UK)","драхма","драхма (UK)",
    "капля","сухая пинта","сухая кварта","exaliter","фемтолитр","галлон","галлон (UK)","гигалитр","гилл","гилл (UK)",
    "гектолитр","Хин (библейский)","бочка","Гомер (библейский)","сто³ футов","килолитр","литр","log (библейский)","мегалитр", "микролитр",
    "миллилитр","миним","миним (UK)","нанолитр","унция","унция (UK)","пек","пек (UK)","петалитр","пиколитр",
    "пинта","пинта (UK)","кварта","кварта (UK)","ster","ст.ложка","ст.ложка (UK)","Таза (испанский)","ч. ложка","ч. ложка (UK)",
    "teraliter","тун"}));
                    //} else {//shotList
//          FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
//    "мкл", "мм³", "миллилитр", "см³", "сантилитр", "децилитр", "литр", "дц³", "декалитр", "гектолитр", "м³", "км³",
//    /*GB*/ "баррельGB", "бушельGB", "пэкGB", "галлонGB", "квартаGB", "пинтаGB", "жидкая унцияGB",
//    /*USA_dry:*/ "баррельUSA,dry", "бушельUSA,dry", "пэкUSA,dry", "галлонUSA,dry","квартаUSA,dry", "пинтаUSA,dry", "гиллUSA,dry", "досковый футUSA,dry",
//    /*USA_luquid:*/ "акрофутUSA,luquid", "ярд³USA,luquid", "баррельUSA,luquid","фут³USA,luquid", "галлонUSA,luquid", "квартаUSA,luquid",
//    "пинтаUSA,luquid","гиллUSA,luquid", "жидкая унцияUSA,luquid", "дюйм³USA,luquid","жидкая драхмаUSA,luquid", "минимUSA,luquid"}));
//             ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
//    "мкл", "мм³", "миллилитр", "см³", "сантилитр", "децилитр", "литр", "дц³", "декалитр", "гектолитр", "м³", "км³",
//    /*GB*/ "баррельGB", "бушельGB", "пэкGB", "галлонGB", "квартаGB", "пинтаGB", "жидкая унцияGB",
//    /*USA_dry:*/ "баррельUSA,dry", "бушельUSA,dry", "пэкUSA,dry", "галлонUSA,dry","квартаUSA,dry", "пинтаUSA,dry", "гиллUSA,dry", "досковый футUSA,dry",
//    /*USA_luquid:*/ "акрофутUSA,luquid", "ярд³USA,luquid", "баррельUSA,luquid","фут³USA,luquid", "галлонUSA,luquid", "квартаUSA,luquid",
//    "пинтаUSA,luquid","гиллUSA,luquid", "жидкая унцияUSA,luquid", "дюйм³USA,luquid","жидкая драхмаUSA,luquid", "минимUSA,luquid"}));
                //}
    ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                } else {//in English
                    //if (longList)
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "acre-foot","acre-inch","attoliter","barrel","barrel (oil)","bath (Biblical)","board foot","bushel","bushel (UK)","cab (Biblical)",
    "cc","ccf","centiliter","cor (Biblical)","cord","cubic centimeter","cubic foot","cubic inch","cubic meter","cubic yard",
    "cup","cup (UK)","deciliter","decistere","dekaliter","dekastere","dessertspoon","dessertspoon (UK)","dram","dram (UK)",
    "drop","dry pint","dry quart","exaliter","femtoliter","gallon","gallon (UK)","gigaliter","gill","gill (UK)",
    "hectoliter","hin (Biblical)","hogshead","homer (Biblical)","hundred-cubic foot","kiloliter","liter","log (Biblical)","megaliter","microliter",
    "milliliter","minim","minim (UK)","nanoliter","ounce","ounce (UK)","peck","peck (UK)","petaliter","picoliter",
    "pint","pint (UK)","quart","quart (UK)","stere","tablespoon","tablespoon (UK)","Taza (Spanish)","teaspoon","teaspoon (UK)",
    "teraliter","tun"}));             
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "acre-foot","acre-inch","attoliter","barrel","barrel (oil)","bath (Biblical)","board foot","bushel","bushel (UK)","cab (Biblical)",
    "cc","ccf","centiliter","cor (Biblical)","cord","cubic centimeter","cubic foot","cubic inch","cubic meter","cubic yard",
    "cup","cup (UK)","deciliter","decistere","dekaliter","dekastere","dessertspoon","dessertspoon (UK)","dram","dram (UK)",
    "drop","dry pint","dry quart","exaliter","femtoliter","gallon","gallon (UK)","gigaliter","gill","gill (UK)",
    "hectoliter","hin (Biblical)","hogshead","homer (Biblical)","hundred-cubic foot","kiloliter","liter","log (Biblical)","megaliter","microliter",
    "milliliter","minim","minim (UK)","nanoliter","ounce","ounce (UK)","peck","peck (UK)","petaliter","picoliter",
    "pint","pint (UK)","quart","quart (UK)","stere","tablespoon","tablespoon (UK)","Taza (Spanish)","teaspoon","teaspoon (UK)",
    "teraliter","tun"}));
                //} else { //shotList
//          FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
//    "µl", "mm³", "ml", "cm³", "cl", "dl", "Litre", "dm³", "Decalitre", "hl", "m³", "km³",
//    /*GB*/ "Barrel GB", "Bushel GB (bu)", "Peck GB (pk)", "Gallon GB (gal)", "Quart GB (qt)", "Pint GB (pt)", "Fluid ounce GB (oz)",
//    /*USA_dry:*/ "Barrel USA,dry", "Bushel USA,dry (bu)", "Peck USA,dry (pk)", "Gallon USA,dry (gal)", "Quart USA,dry (qt)", "Pint USA,dry (pt)", "Gill USA,dry", "Board foot USA,dry (FBM)",
//    /*USA_luquid:*/ "Acre foot USA,luquid", "Cubic yard USA,luquid (yd³)", "Barrel USA,luquid",
//    "Cubic foot USA,luquid (ft³)", "Gallon USA,luquid (gal)", "Quart USA,luquid (qt)", "Pint USA,luquid (pt)",
//    "Gill USA,luquid", "Fluid ounce USA,luquid (oz)", "Cubic inch USA,luquid (in³)",
//    "Fluid dram USA,luquid", "Minim USA,luquid"}));
//             ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
//    "µl", "mm³", "ml", "cm³", "cl", "dl", "Litre", "dm³", "Decalitre", "hl", "m³", "km³",
//    /*GB*/ "Barrel GB", "Bushel GB (bu)", "Peck GB (pk)", "Gallon GB (gal)", "Quart GB (qt)", "Pint GB (pt)", "Fluid ounce GB (oz)",
//    /*USA_dry:*/ "Barrel USA,dry", "Bushel USA,dry (bu)", "Peck USA,dry (pk)", "Gallon USA,dry (gal)", "Quart USA,dry (qt)", "Pint USA,dry (pt)", "Gill USA,dry", "Board foot USA,dry (FBM)",
//    /*USA_luquid:*/ "Acre foot USA,luquid", "Cubic yard USA,luquid (yd³)", "Barrel USA,luquid",
//    "Cubic foot USA,luquid (ft³)", "Gallon USA,luquid (gal)", "Quart USA,luquid (qt)", "Pint USA,luquid (pt)",
//    "Gill USA,luquid", "Fluid ounce USA,luquid (oz)", "Cubic inch USA,luquid (in³)",
//    "Fluid dram USA,luquid", "Minim USA,luquid"}));
                    //}
            ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                }
                break;
            case 3://density
                if (LangMenuItem_Russ_.isSelected()) {
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
     "attogram/л","centigram/л","дециграмм/л","dekagram/литр","exagram/л","femtogram/л","гигаграмм/л","г/см³","г/м³","г/мм³",
     "г/л","гектограмм/л","кг/см³","кг/м³","кг/л","мегаграмм/л","микрограмм/л","миллиграмм/см³","миллиграмм/кубометр","миллиграмм/мм³",
     "миллиграмм/л","нанограм/л","унция/фут³","унция/дюйм³","унция/галлон","petagram/л","picogram/л","фунт/фут³","фунт/дюйм³","фунт/галлон",
     "psi/1000 футов","Teragram/л","тон/ярд³"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
     "attogram/л","centigram/л","дециграмм/л","dekagram/литр","exagram/л","femtogram/л","гигаграмм/л","г/см³","г/м³","г/мм³",
     "г/л","гектограмм/л","кг/см³","кг/м³","кг/л","мегаграмм/л","микрограмм/л","миллиграмм/см³","миллиграмм/кубометр","миллиграмм/мм³",
     "миллиграмм/л","нанограм/л","унция/фут³","унция/дюйм³","унция/галлон","petagram/л","picogram/л","фунт/фут³","фунт/дюйм³","фунт/галлон",
     "psi/1000 футов","Teragram/л","тон/ярд³"}));
                                    ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                } else {//in English
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "attogram/liter","centigram/liter","decigram/liter","dekagram/liter","exagram/liter","femtogram/liter","gigagram/liter","gram/centimeter³","gram/meter³","gram/millimeter³",
    "gram/liter","hectogram/liter","kilogram/centimeter³","kilogram/meter³","kilogram/liter","megagram/liter","microgram/liter","milligram/centimeter³","milligram/meter³","milligram/millimeter³",
    "milligram/liter","nanogram/liter","ounce/foot³","ounce/inch³","ounce/gallon","petagram/liter","picogram/liter","pound/foot³","pound/inch³","pound/gallon",
    "psi/1000 feet","teragram/liter","ton/yard³"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "attogram/liter","centigram/liter","decigram/liter","dekagram/liter","exagram/liter","femtogram/liter","gigagram/liter","gram/centimeter³","gram/meter³",
    "gram/millimeter³","gram/liter","hectogram/liter","kilogram/centimeter³","kilogram/meter³","kilogram/liter","megagram/liter","microgram/liter","milligram/centimeter³","milligram/meter³",
    "milligram/millimeter³","milligram/liter","nanogram/liter","ounce/foot³","ounce/inch³","ounce/gallon","petagram/liter","picogram/liter","pound/foot³",
    "pound/inch³","pound/gallon","psi/1000 feet","teragram/liter","ton/yard³"}));
                                    ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                }
                break;
              case 4://temperature
                if (LangMenuItem_Russ_.isSelected()) {
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "Цельсий", "Фаренгейт", "Кельвин", "Ранкина", "Реомюра"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "Цельсий", "Фаренгейт", "Кельвин", "Ранкина", "Реомюра"}));
            ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                } else {//in English
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "Celsius","Fahrenheit","Kelvin","Rankine","Réaumur"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "Celsius","Fahrenheit","Kelvin","Rankine","Réaumur"}));
            ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                }
                break;
            case 5://pressure
                if (LangMenuItem_Russ_.isSelected()) {
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "атмосфера","attopascal","бар","см рт.ст.(0°C)","см воды (4°C)","centipascal","деципаскаль","декапаскаль","дин/сантиметр²","exapascal",
    "femtopascal","фут водой (60°F)","gigapascal","гектопаскаль","дюйм ртути (32°F)","дюйм воды (60°F)"," кг/см²","кг/м²","кг/мм²","килоньютон/м²",
    "килопаскаль","кип/дюйм²","МПа","микробар","micropascal","миллибар","мм ртути (0°C)","миллипаскаль","нанопаскаль","Ньютон/см²","ньютон/м²",
    "ньютон/мм²","Pascal","петапаскаль","пикопаскаль","фунт/фут²","фунт/дюйм²","пси","терапаскаль","т/фут²","т/дюйм²","торр"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "атмосфера","attopascal","бар","см рт.ст.(0°C)","см воды (4°C)","centipascal","деципаскаль","декапаскаль","дин/сантиметр²","exapascal",
    "femtopascal","фут водой (60°F)","gigapascal","гектопаскаль","дюйм ртути (32°F)","дюйм воды (60°F)"," кг/см²","кг/м²","кг/мм²","килоньютон/м²",
    "килопаскаль","кип/дюйм²","МПа","микробар","micropascal","миллибар","мм ртути (0°C)","миллипаскаль","нанопаскаль","Ньютон/см²","ньютон/м²",
    "ньютон/мм²","Pascal","петапаскаль","пикопаскаль","фунт/фут²","фунт/дюйм²","пси","терапаскаль","т/фут²","т/дюйм²","торр"}));
                                    ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                } else {//in English
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "atmosphere","attopascal","bar","cm mercury (0°C)","cm water (4°C)","centipascal","decipascal","dekapascal","dyne/centimeter²","exapascal",
    "femtopascal","foot water (60°F)","gigapascal","hectopascal","inch mercury (32°F)","inch water (60°F)","kilogram/cm²","kilogram/m²","kilogram/mm²","kilonewton/m²",
    "kilopascal","kip/inch²","megapascal","microbar","micropascal","millibar","mm mercury (0°C)","millipascal","nanopascal","newton/cm²","newton/m²",
    "newton/mm²","pascal","petapascal","picopascal","pound/foot²","pound/inch²","psi","terapascal","ton/foot²","ton/inch²","torr"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "atmosphere","attopascal","bar","cm mercury (0°C)","cm water (4°C)","centipascal","decipascal","dekapascal","dyne/centimeter²","exapascal",
    "femtopascal","foot water (60°F)","gigapascal","hectopascal","inch mercury (32°F)","inch water (60°F)","kilogram/cm²","kilogram/m²","kilogram/mm²","kilonewton/m²",
    "kilopascal","kip/inch²","megapascal","microbar","micropascal","millibar","mm mercury (0°C)","millipascal","nanopascal","newton/cm²","newton/m²",
    "newton/mm²","pascal","petapascal","picopascal","pound/foot²","pound/inch²","psi","terapascal","ton/foot²","ton/inch²","torr"}));
                                    ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                }
                break;
         case 6://velocity
                if (LangMenuItem_Russ_.isSelected()) {
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "см/час","см/мин","см/с","фут/час","фут/мин","фут/сек","км/час","км/мин","км/с","узлов",
    "ск.света","Маха (на уровне моря)","Маха (SI)","м/час","м/мин","м/сек","миль/час","миль/мин","миль/сек","ярд/час",
    "ярд/мин","ярд/сек"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "см/час","см/мин","см/с","фут/час","фут/мин","фут/сек","км/час","км/мин","км/с","узлов",
    "ск.света","Маха (на уровне моря)","Маха (SI)","м/час","м/мин","м/сек","миль/час","миль/мин","миль/сек","ярд/час",
    "ярд/мин","ярд/сек"}));
            ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                } else {//in English
            FromCmBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "cm/hour","cm/minute","cm/second","foot/hour","foot/minute","foot/second","km/hour","km/minute","km/second","knot",
    "light","mach (at sea level)","mach (SI)","m/hour","m/minute","m/second","mile/hour","mile/minute","mile/second","yard/hour",
    "yard/minute","yard/second"}));
               ToCmBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
    "cm/hour","cm/minute","cm/second","foot/hour","foot/minute","foot/second","km/hour","km/minute","km/second","knot",
    "light","mach (at sea level)","mach (SI standard)","m/hour","m/minute","m/second","mile/hour","mile/minute","mile/second","yard/hour",
    "yard/minute","yard/second"}));
                                    ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
                }
                break;
        }
    }//GEN-LAST:event_UnitChooseCBxActionPerformed

    private void ToCmBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToCmBxActionPerformed
ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
    }//GEN-LAST:event_ToCmBxActionPerformed

    private void ToTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToTxtFieldActionPerformed
ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
    }//GEN-LAST:event_ToTxtFieldActionPerformed

    private void FromCmBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromCmBoxActionPerformed
ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
    }//GEN-LAST:event_FromCmBoxActionPerformed

    private void FromTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromTxtFieldActionPerformed
        ToTxtField.setText(converter.myFormatter(converter.convert(
                FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
                CommaMenuItem.isSelected()));
    }//GEN-LAST:event_FromTxtFieldActionPerformed

    private void LangMenuItem_Russ_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LangMenuItem_Russ_ActionPerformed
        LangMenuItem_Eng_.setState(false);
        UnitChooseCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Длина", "Площадь", "Объем", "Плотность", "Температура", "Давление"}));
        ToTxtField.setText(converter.myFormatter(converter.convert(
                FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
                CommaMenuItem.isSelected()));
    }//GEN-LAST:event_LangMenuItem_Russ_ActionPerformed

    private void LangMenuItem_Eng_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LangMenuItem_Eng_ActionPerformed
        ToTxtField.setText(converter.myFormatter(converter.convert(
                FromCmBox.getSelectedIndex(), ToCmBx.getSelectedIndex(), FromTxtField.getText(), (String) UnitChooseCBx.getSelectedItem()),
                CommaMenuItem.isSelected()));
        UnitChooseCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Lenght", "Area", "Volume", "Density", "Temperature", "Pressure"}));
        LangMenuItem_Russ_.setState(false);
    }//GEN-LAST:event_LangMenuItem_Eng_ActionPerformed

    private void jRadioButtonMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed

    private void jRadioButtonMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonMenuItem2ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void CommaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommaMenuItemActionPerformed
ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected()));
PointMenuItem.setState(false);
    }//GEN-LAST:event_CommaMenuItemActionPerformed

    private void PointMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointMenuItemActionPerformed
CommaMenuItem.setState(false);
ToTxtField.setText(converter.myFormatter(converter.convert(
    FromCmBox.getSelectedIndex(),ToCmBx.getSelectedIndex(),FromTxtField.getText(),(String)UnitChooseCBx.getSelectedItem()),
    CommaMenuItem.isSelected())); 
    }//GEN-LAST:event_PointMenuItemActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalcUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem CommaMenuItem;
    protected javax.swing.JComboBox FromCmBox;
    protected javax.swing.JTextField FromTxtField;
    private javax.swing.JCheckBoxMenuItem LangMenuItem_Eng_;
    private javax.swing.JCheckBoxMenuItem LangMenuItem_Russ_;
    private javax.swing.JCheckBoxMenuItem PointMenuItem;
    protected javax.swing.JComboBox ToCmBx;
    protected javax.swing.JTextField ToTxtField;
    protected javax.swing.JComboBox UnitChooseCBx;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
